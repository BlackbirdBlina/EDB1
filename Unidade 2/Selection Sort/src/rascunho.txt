Selection Sort

Funciona de modo que busca sempre o menor valor do vetor.
Realiza todas as comparações necessárias para garantir que o menor valor foi encontrado.
Troca com a primeira posição e depois as seguintes a cada vez que encontra um novo menor valor.

Exemplo:
v = {10, 15, 0, 2, -1, 3, 9}

Analisando o vetor v com base no selection sort:
    Toma o valor da primeira posição como menor valor (10).
    Compara com o valor da segunda posição: "10 < 15? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com o valor da terceira posição: "10 < 0? -> não -> seleciona 0".
    0 agora é o menor valor.
    Avança para a próxima posição.
    Compara com a próxima posição: "0 < 2? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "0 < -1? -> não -> seleciona -1".
    -1 agora é o menor valor.
    Avança para a próxima posição.
    Compara com a próxima posição: "-1 < 3? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "-1 < 9? -> sim -> mantém".
    -1 é de fato o menor valor.
    Troca com a primeira posição.

O vetor agora tem a seguinte configuração:
v = {-1, 15, 0, 2, 10, 3, 9}

    Toma agora o segundo valor como o segundo menor valor (15).
    Compara com o valor da terceira posição: "15 < 0? -> não -> seleciona 0".
    0 agora é o menor valor.
    Avança para a próxima posição.
    Compara com a próxima posição: "0 < 2? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "0 < 10? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "0 < 3? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "0 < 9? -> sim -> mantém".
    0 é de fato o segundo menor valor.
    Troca com a segunda posição.

O vetor agora tem a seguinte configuração:
v = {-1, 0, 15, 2, 10, 3, 9}

    Toma agora o terceiro valor como o terceiro menor valor (15).
    Compara com o valor da quarta posição: "15 < 2? -> não -> seleciona 2".
    2 agora é o menor valor.
    Avança para a próxima posição.
    Compara com a próxima posição: "2 < 10? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "2 < 3? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "2 < 9? -> sim -> mantém".
    2 é de fato o terceiro menor valor.
    Troca com a terceira posição.

O vetor agora tem a seguinte configuração:
v = {-1, 0, 2, 15, 10, 3, 9}

    Toma agora o quarto valor como o quarto menor valor (15).
    Compara com o valor da quarta posição: "15 < 10? -> não -> seleciona 10".
    10 agora é o menor valor.
    Avança para a próxima posição.
    Compara com a próxima posição: "10 < 3? -> não -> seleciona 3".
    3 agora é o menor valor.
    Avança para a próxima posição.
    Compara com a próxima posição: "3 < 9? -> sim -> mantém".
    3 é de fato o quarto menor valor.
    Troca com a quarta posição.

O vetor agora tem a seguinte configuração:
v = {-1, 0, 2, 3, 10, 15, 9}

    Toma agora o quinto valor como o quinto menor valor (10).
    Compara com o valor da sexta posição: "10 < 15? -> sim -> mantém".
    Avança para a próxima posição.
    Compara com a próxima posição: "10 < 9? -> não -> seleciona 9".
    9 agora é o menor valor.
    9 é de fato o quinto menor valor.
    Troca com a quinta posição.

O vetor agora tem a seguinte configuração:
v = {-1, 0, 2, 3, 9, 15, 10}

    Toma agora o sexto valor como o sexto menor valor (15).
    Compara com o valor da sétima posição: "15 < 10? -> não -> seleciona 10".
    10 agora é o menor valor.
    10 é de fato o sexto menor valor.
    Troca com a sexta posição

O vetor agora tem a seguinte configuração:
v = {-1, 0, 2, 3, 9, 10, 15}

    Toma agora o sétimo valor como o sétimo menor valor (15).
    15 é de fato o sétimo menor valor.
    Finaliza algoritmo.

Visualizando a recursão:

problema de tamanho 7 > {|10, 15, 0, 2, -1, 3, 9}
problema de tamanho 6 > {-1|, 15, 0, 2, 10, 3, 9} --- {15, 0, 2, 10, 3, 9}/ {-1|, 15, 0, 2, 10, 3} como fazer para pegar o primeiro e não o segundo vetor?
problema de tamanho 5 > {-1, 0|, 15, 2, 10, 3, 9}
problema de tamanho 4 > {-1, 0, 2|, 15, 10, 3, 9}
problema de tamanho 3 > {-1, 0, 2, 3|, 10, 15, 9}
problema de tamanho 2 > {-1, 0, 2, 3, 9|, 15, 10}
problema de tamanho 1 > {-1, 0, 2, 3, 9, 10|, 15}
problema de tamanho 0 > {-1, 0, 2, 3, 9, 10, 15|} (opcional)

função controleRec(vetor, inicio, final){
    int min = inicio;
    for (int j = inicio + 1 ; j < final; ++j){
        if (v[j] < v[min]){
            min = j;
        }
    }
    int aux = v[inicio];
    v[inicio] = v[min];
    v[min] = aux;
    controleRec(vetor, inicio + 1, final);

}

